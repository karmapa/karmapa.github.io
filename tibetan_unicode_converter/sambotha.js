//auto generated from sambo.yy x2j.yy table.js, do not edit this file.

var dedris={"a":["ཀ","\"","ཁ","ག","ང","ཅ","�","ཆ","ཇ","ཉ","ཏ","ཐ","་","ད","ན","པ","ཕ","བ","མ","ཙ","ཚ","ཛ","ཝ","ཞ","ཟ","འ","ཡ","ར","ལ","ཤ","ས","ཧ","ཨ","ཊ","ཋ","ཌ","ཎ","ཥ","ཀྱ","ཁྱ","གྱ","པྱ","ཕྱ","བྱ","མྱ","ཀྲ","ཁྲ","གྲ","ཏྲ","ཐྲ","དྲ","པྲ","ཕྲ","བྲ","མྲ","ཤྲ","སྲ","ཧྲ","ཀླ","གླ","བླ","ཟླ","རླ","`","སླ","རྐ","རྒ","རྔ","རྗ","རྙ","རྟ","རྡ","རྣ","རྦ","རྨ","རྩ","རྫ","རྐྱ","རྒྱ","རྨྱ","ལྐ","ལྒ","ལྔ","ལྕ","ལྗ","ལྟ","ལྡ","ལྤ","ལྦ","ལྷ","སྐ","སྒ","སྔ","སྙ"],"b":["སྟ","\"","སྡ","སྣ","སྤ","སྦ","'","སྨ","སྩ","སྐྱ","སྒྱ","སྤྱ","-","སྦྱ","སྨྱ","སྐྲ","སྒྲ","སྣྲ","སྤྲ","སྦྲ","སྨྲ","ཀྭ","ཁྭ","གྭ","གྲྭ","རྒྭ","ཉྭ","ཏྭ","སྟྭ","ཊྭ","དྭ","དྲྭ","ཕྱྭ","ཙྭ","རྩྭ","ཚྭ","ཞྭ","ཟྭ","རྭ","ལྭ","ཤྭ","སྭ","ཧྭ","ཀྐ","ཀྐྲ","ཀྑ","ཀྒ","ཀྒྷ","ཀྔ","ཀྟ","ཀྟྭ","ཀྟྱ","ཀྟྲ","ཀྚ","ཀྠ","ཀྛ","ཀྡ","ཀྡྲ","ཀྞ","ཀྤ","ཀྤྲ","ཀྦ","ཀྨ","`","ཀྩ","ཀྫྙ","ཀྴ","ཀྴྱ","ཀྵ","ཀྵྐྵ","ཀྵྜ","ཀྵྞ","ཀྵྨ","ཀྵྭ","ཀྵྱ","ཀྵྲ","ཀྵླ","ཀྶ","ཀྷ","ཁྑ","ཁྣ","ཁླ","ཁྷ","གྒ","གྔ","གྔྷ","གྟ","གྟྱ","གྡ","གྡྷ","གྣ","གྣྱ","གྞ","གྦ"],"c":["གྦྱ","\"","གྦྷ","གྨ","གྩ","གྫ","'","གྻ","གྲྱ","གྴ","གྴྭ","གྷ","-","གྷྒྷ","གྷྣ","གྷྣྱ","གྷྭ","གྷྱ","གྷྲ","གྷླ","ངྐ","ངྐྟ","ངྐྟྲ","ངྐྱ","ངྐྲ","ངྑ","ངྒ","ངྒྱ","ངྒླ","ངྒྷ","ངྒྷྲ","ངྔྷ","ངྔྷྱ","ངྟ","ངྻ","ངྴ","ངྵ","ངྶ","ངྷ","ངྷྣ","ངྷྣྱ","ངྷྭ","ངྷྱ","ངྷྲ","ཅྭ","ཉྠ","ཉྩ","ཉྪ","ཉྫ","ཉྫྙ","ཏྐ","ཏྐྲ","ཏྑ","ཏྒ","ཏྒྲ","ཏྟ","ཏྟྭ","ཏྟྱ","ཏྟྲ","ཏྠ","ཏྠྱ","ཏྡྷ","ཏྣ","`","ཏྤ","ཏྤྠ","ཏྤྣ","ཏྤྲ","ཏྤྷ","ཏྥ","ཏྦྷ","ཏྨ","ཏྨྱ","ཏྨྲ","ཏྪ","ཏྫ","ཏྱ","ཏྻ","ཏྲྟྲ","ཏྲྱ","ཏྵ","ཏྶ","ཏྶྣ","ཏྶྭ","ཏྷ","ཊྐ","ཊྒ","ཊྒྲ","ཊྚ","ཊྚྱ","ཊྠ","ཊྡ","ཊྣ","ཊྤ"],"d":["ཊྥ","\"","ཊྦྷ","ཊྨ","ཊྱ","ཊྲ","'","ཊྵ","ཊྶ","ཐྭ","ཐྱ","ཐླྷ","-","ཋྐ","ཋྱ","ཋྲ","དྑ","དྒ","དྒྷ","དྒྷྲ","དྔ","དྟ","དྠ","དྡ","དྡྲ","དྡྷ","དྡྷྭ","དྡྷྱ","དྡྷྲ","དྤ","དྤྲ","དྦ","དྦྲ","དྦྷ","དྦྷྱ","དྦྷྲ","དྨ","དྭྱ","དྺ","དྱ","དྲྱ","དྶ","དྷ","དྷྣ","དྷྣྱ","དྷྨ","དྷྭ","དྷྱ","དྷྲ","ཌྒ","ཌྒྷ","ཌྒྲ","ཌྡྷ","ཌྜ","ཌྜྷ","ཌྦྷ","ཌྨ","ཌྱ","ཌྷ","ཌྷྱ","ཌྷྲ","ནྐ","ནྟ","`","ནྟྭ","ནྟྱ","ནྟྲ","ནྚ","ནྠ","ནྡ","ནྡྟ","ནྡྭ","ནྡྱ","ནྡྲ","ནྡྷ","ནྡྷྱ","ནྡྷྲ","ནྜ","ནྣ","ནྤ","ནྥ","ནྦྷ","ནྨ","ནྩ","ནྫ","ནྭ","ནྱ","ནྻ","ནྲ","ནླ","ནྴ","ནྶ","ནྷ","ཎྔ"],"e":["ཎྔྟ","\"","ཎྟ","ཎྟྲ","ཎྚ","ཎྛ","'","ཎྡ","ཎྡྟ","ཎྡྡྷ","ཎྡྭ","ཎྡྱ","-","ཎྡྲ","ཎྡྷ","ཎྜ","ཎྞ","ཎྨ","ཎྱ","ཎྻ","ཎྲ","ཎྵ","པྐྲ","པྔྷ","པྟ","པྠ","པྡ","པྡྷ","པྣ","པྤ","པྥ","པྨ","པྫ","པྻ","པླ","པྴ","པྶ","པྷ","ཕྥ","བྐ","བྟ","བྠ","བྡ","བྡྷ","བྥ","བྦྷ","བྦྷྱ","བྨ","བྫ","བྻ","བྷ","བྷྨ","བྷྱ","བྷྻ","བྷྲ","མྒྷ","མྟ","མྣ","མྞ","མྤ","མྤྱ","མྤྲ","མྥ","`","མྦ","མྦྲ","མྦླ","མྦྷ","མྦྷྱ","མྦྷྲ","མྨ","མྨྲ","མྺ","མླ","མྴ","མྶ","ཙྐ","ཙྩ","ཙྪ","ཙྪྭ","ཙྪྱ","ཙྪྲ","ཙྱ","ཙྻ","ཙྲ","ཙྴ","ཚྪ","ཛྙ","ཛྙྱ","ཛྨ","ཛྫ","ཛྫྙ","ཛྫྷ","ཛྭ"],"f":["ཛྱ","\"","ཛྲ","ཛྷ","ཛྷྱ","ཝྱ","'","ཝྲ","འྭ","ཡྦ","ཡྻ","ཡྶ","-","རྐྐ","རྐྟ","རྐྲ","རྐྴ","རྐྴྱ","རྐྵ","རྐྵྱ","རྑ","རྒྒ","རྒྦྷ","རྒྵ","རྒྱྭ","རྒྲ","རྒྷ","རྒྷྱ","རྔྷ","རྔྷྱ","རྟྟ","རྟྤྣྱ","རྟྨ","རྟྱ","རྟྲ","རྟྶྣྱ","རྚ","རྠ","རྠྱ","རྡྭ","རྡྡ","རྡྡྷ","རྡྨ","རྡྱ","རྡྲ","རྡྷ","རྡྷྭ","རྡྷྲ","རྜ","རྜྷྲ","རྣྡྲ","རྣྭ","རྞ","རྞྞ","རྞྱ","རྤྱ","རྥ","རྦྟ","རྦྤ","རྦྦ","རྦྦྷ","རྦྦྷྱ","རྦྱ","`","རྦྲ","རྦྷ","རྦྷྱ","རྦྷྲ","རྨྨ","རྩྩ","རྩྪ","རྫྙ","རྫྫ","རྫྭ","རྫྲ","རྫྷ","རྵྱ","རྷ","ཪྟ","ཪྠ","ཪྡ","ཪྣྲ","ཪྞ","ཪྞྜ","ཪྞྞ","ཪྤ","ཪྤྤ","ཪྤྲ","ཪྥ","ཪྦ","ཪྦྟ","ཪྦྷ","ཪྨ","ཪྪ"],"g":["ཪྺ","\"","ཪྱ","ཪྻ","ཪྻྻ","ཪྴ","'","ཪྴྣ","ཪྴྞ","ཪྴྨ","ཪྴྭ","ཪྴྱ","-","ཪྵ","ཪྵྨ","ཪྶ","ལྤྱ","ལྥ","ལྦྷ","ལྨ","ལྱ","ལྱྭ","ལྻ","ལླ","ལྷྭ","ཤྟ","ཤྚ","ཤྣ","ཤྞ","ཤྨ","ཤྩ","ཤྩྱ","ཤྪ","ཤྱ","ཤྻ","ཤླ","ཤྴ","ཥྐ","ཥྐྲ","ཥྟ","ཥྚ","ཥྚྭ","ཥྚྱ","ཥྚྲ","ཥྠ","ཥྛ","ཥྞ","ཥྤ","ཥྤྱ","ཥྤྲ","ཥྦ","ཥྨ","ཥྩ","ཥྩྱ","ཥྭ","ཥྱ","ཥླ","ཥྵ","ཥྶ","སྑ","སྗ","སྟྱ","སྟྲ","`","སྟྲྱ","སྠ","སྥ","སྦྷ","སྫ","སྱ","སྻ","སྴ","སྵ","སྶ","ཧྟ","ཧྣ","ཧྞ","ཧྥ","ཧྨ","ཧྨྱ","ཧྱ","ཧྱྭ","ཧྻ","ཧླ","ཧྶ","ཨྱ","ཨྸ","x","y","z","{","|","}","~"],"vowa":["༄༅","\"","༄༅༅","༅","ྃ","ྃ","'","ཾ","ཾ","༁ྃ","ྂ","།","་","༑","༴","༠","༡","༢","༣","༤","༥","༦","༧","༨","༩","ཿ","༔","ཨོཾ","ཨཱཿ","ཧཱུྃ","༈","྅","ི","ི","ི","ིཾ","ིཾ","ྀ","ྀ","ྀཾ","ྀཾ","ེ","ེ","ེཾ","ེཾ","ཻ","ཻ","ཻཾ","ཻཾ","ོ","ོ","ོཾ","ོཾ","ོྃ","ཽ","ཽ","ཽཾ","ཽཾ","ཀ྄","ག྄","ཏ྄","ད྄","ཌ྄","`","བ྄","མ྄","ཙ྄","ཛ྄","ར྄","ས྄","ཆྒཻ","྄","྄","ྈ","ྉ","ྈྐ","ྈྑ","ྉྤ","ྉྥ","�","འུྃ","ཧཱུྂ","ཨྠ","ཨྠྀི","ྊྃ","ལྙྃ","༵","༵","༷","༷","","༧","}","~"],"syma":["*","\"","�","�","%","&","'","༼","༽","ངྔ","ངླ","ངྼ","-","ཀྒླཱ","/","ཋྚ","ཊྛ","ཌྛ","རྟྟྨ","མླྭ","ཀྐླཱ","ཀྐཱུ","_","_","_","{","}","(","=",")","?","","ལྼ","ལྼཱ","ཨྭ","ཐྐ","མྷ","ལྲ","ཀྼ","ཁྼ","གྼ","«","»","༏","[","]","©","","","","","གྷྒྟ","","","ཉྐ","ཤྦ","Y","Z","༼","\\","༽","^","_","`","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","༼","|","༽",""]}
function  parse (a,b,c) {
	;var s  =  a.split('<w:body>')[1]
	;var x  =  new RegExp('<[^>]*>','g')
	;var M  =  s.match(x)
	;var L  =  s .split (x)
	;var R  =  [{text: L[0]}]
	;var F  =  []
	;var stack  =  []
	
	function  addFont (a,b,c) {
		;var i  =  F .indexOf (a)
		if (i >= 0) return  i
		i = F.length
		F .push (a)
		return i
	}
	
	function  parseTag (a,b,c) {
		;var x  =  new  RegExp('<w:p>|<w:p/>|<w:p +[^>]*>','g')
		if (a.match(x)) {
			return  { type:'par' }
		}
		;var x  =  new  RegExp('<w:rFonts [^>]*>', 'g')
		if (a.match(x)) {
			;var xf  =  new  RegExp('w:hAnsi="([^"]*)"')
			;var m  =  xf.exec(a)
			return  {type:'font', id:addFont(m[1])}
		}
		;var x  =  '<w:sz [^>]*>'
		if (a.match(x)) {
			;var xf  =  new  RegExp('w:val="([^"]*)"')
			;var m  =  xf.exec(a)
			return  {type:'size', size:Math.round(m[1]/2)} // docx font size is double
		}
		return  {}
	}

	 for(var i = 0; i < L.length; i++){
		// remove &amp; etc
		;var s  =  L[i]
		s = s .split ('&amp;' ).join ('&')
		s = s .split ('&lt;' ).join ('<')
		s = s .split ('&gt;' ).join ('>')
		s = s .split ('&quot;' ).join ('"')
		s = s .split ('&apos;' ).join ("'")
		L[i] = s
	}

	;var curSize  =  undefined
	;var curFont  =  undefined
	 for(var m = 0; m < M.length; m++){
		;var o  =  parseTag(M[m])
		if (o.type == 'par') { R .push (o ); continue; }
		if (o.type == 'font') curFont = o.id
		if (o.type == 'size') curSize = o.size
		o.text = L[m+1]
		if (L[m+1].length > 0) {
			;var span  =  { text: L[m+1] }
			if (curFont != undefined) span.font = curFont
			if (curSize != undefined) span.size = curSize
			R .push (span)
			curFont = undefined
			curSize = undefined
		}
	}
	
	R = R.filter(function  (a,b,c) { if(a != '') return  a })
	return  {fonts:F, text:R}
}

function  toHtml  (json) {
	;var R  =  '<html>'
	;var setFont  =  {}
	;var curFont  =  {}
	 for(var i = 0; i < json.text.length; i++){
		;var o  =  json.text[i]
		if (o == undefined) continue;
		if ((typeof  o.text != "undefined")) {
			;var f  =  []
			if ((typeof o.font != "undefined")) f .push ('font-family:"' + json.fonts[o.font] + '";')
			if ((typeof o.size != "undefined")) f .push ('font-size:' + o.size+'pt;')
			R += '<span style=\'' + f.join('' )+ '\'>' + o.text + '</span>'
		} else if (o.type == 'par') {
			R += '<p>'
		}
	}
	R += '</html>'
	return  R
}

if (typeof  (module )!= 'undefined') { //node
	module.exports.docxToJson = parse
	module.exports.jsonToHtml = toHtml
} else  { // browser
	window.docxToJson = parse
	window.jsonToHtml = toHtml
}


var UNICODE_FONT  =  'Microsoft Himalaya'
;var V  =  ['', 'ུ','ཱ','ཱུ']

function  convertStringWithFont    (s,fontTable,vowel) {
	;var R  =  ''
	if (vowel == undefined) vowel = ''
	 for(var i = 0; i < s.length; i++){
		;var C  =  fontTable[(s .charCodeAt (i)) - 33]
		if (C) R += C + vowel
		else  R += ' '
	}
	R = R.replace(/་ /g, '<font color=red>་</font>') // docx tseg+space problem.
	return  R
}

function  dedrisIdFromName (a,b,c) {
	a = a.toLowerCase()
	if (a .indexOf ('ededris-' )== 0 || a .indexOf ('dedris-' )== 0) {
		a = (a .split ('-'))[1]
		;var name  =  ''  ;var num  =  ''
		 for(var i = 0; i < a.length; i++)if (a[i] >= '0' && a[i] <= '9') num += a[i]; else  name += a[i]
		if (num == '') num = '0'
		return  { f:name, v:V[parseInt(num)] }
	}
}

if (!(typeof  dedris != "undefined")) eval(fs.readFileSync('table.js').toString())

function  removeFonts  (doc) {
	// remove Sambotha fonts from font table
	// update references in text flow
	;var R  =  []
	;var F  =  doc.fonts
	;var newF  =  [UNICODE_FONT]
	;var newId  =  []
	 for(var f = 0; f < F.length; f++){
		;var id  =  dedrisIdFromName(F[f])
		if (id == undefined) {
			newId[f] = newF.length
			newF .push (F[f])
		} else  newId[f] = 0
	}
	 for(var t = 0; t < doc.text.length; t++){
		;var var0 =  doc.text[t]
		if ((typeof  (var0.font) != "undefined")) var0.font = newId[var0.font]
	}
	doc.fonts = newF
	return  doc
}

function  convert  (doc) {
	;var F  =  doc.fonts
	 for(var r = 0; r < doc.text.length; r++){
		;var o  =  doc.text[r]
		if ((typeof  o.text != "undefined")) {
			var  f
			if ((typeof  o.font != "undefined")) f = dedrisIdFromName(doc.fonts[o.font])
			if (f) {
				o.text = convertStringWithFont(o.text, dedris[f.f], f.v)
			}
		}
	}
	return  removeFonts(doc)
}

if (typeof  (module )!= 'undefined') module.exports.toUnicode = convert //node
else  window.toUnicode = convert // browser

